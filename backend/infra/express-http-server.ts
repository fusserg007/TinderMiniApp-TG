import express, { Express, Request, Response, NextFunction } from 'express';
import cors from 'cors';
import session from 'express-session';
import { HttpServer } from './entities/http-server';
import { HttpRoute } from '../adapter/rest-api/entities/http-route';
import { HttpRequest } from '../adapter/rest-api/entities/http-request';
import { HttpResponse } from '../adapter/rest-api/entities/http-response';
import { ValidationError } from '../app/errors/validation-error';
import { ServiceError } from '../app/errors/service-error';
import { AuthService } from '../app/auth';

/**
 * Express.js —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
 */
export class ExpressHttpServer implements HttpServer {
  private app: Express;
  private authService: AuthService;

  constructor(private routes: HttpRoute[]) {
    this.app = express();
    this.authService = new AuthService();
    this.setupMiddleware();
    this.setupRoutes();
    this.setupErrorHandling();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
   */
  private setupMiddleware(): void {
    // CORS
    this.app.use(cors({
      origin: process.env.FRONTEND_URL || 'https://your-telegram-mini-app.com',
      credentials: true
    }));

    // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.app.use((req: Request, res: Response, next: NextFunction) => {
      console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
      next();
    });

    // –°–µ—Å—Å–∏–∏
    this.app.use(session({
      secret: process.env.SESSION_SECRET || 'your-secret-key',
      resave: false,
      saveUninitialized: false,
      cookie: {
        secure: process.env.NODE_ENV === 'production',
        httpOnly: true,
        maxAge: 30 * 24 * 60 * 60 * 1000 // 30 –¥–Ω–µ–π
      }
    }));
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
   */
  private setupRoutes(): void {
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    this.app.use('/image', express.static('uploads'));

    // API –º–∞—Ä—à—Ä—É—Ç—ã
    for (const route of this.routes) {
      const handler = async (req: Request, res: Response, next: NextFunction) => {
        try {
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
          const httpRequest = new HttpRequest(
            route.method === 'GET' ? req.query : req.body,
            req.query,
            req.get('User-Agent') || '',
            req.ip || req.connection.remoteAddress || ''
          );

          const httpResponse = new HttpResponse();

          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
          let user = null;
          if (req.session && (req.session as any).userId) {
            user = await this.authService.getUserBySession((req.session as any).sessionId);
          }

          // –í—ã–ø–æ–ª–Ω—è–µ–º middleware (–µ—Å–ª–∏ –µ—Å—Ç—å)
          if (route.before) {
            for (const middleware of route.before) {
              await middleware(httpRequest, httpResponse, user);
            }
          }

          // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
          await route.handler(httpRequest, httpResponse, user);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
          res.status(httpResponse.statusCode).json(httpResponse.body);
        } catch (error) {
          next(error);
        }
      };

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç
      if (route.method === 'GET') {
        this.app.get(route.path, handler);
      } else if (route.method === 'POST') {
        this.app.post(route.path, handler);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
    this.app.use('*', (req: Request, res: Response) => {
      res.status(404).json({
        error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        path: req.originalUrl
      });
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  private setupErrorHandling(): void {
    this.app.use((error: Error, req: Request, res: Response, next: NextFunction) => {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);

      if (error instanceof ValidationError) {
        return res.status(error.statusCode).json({
          error: error.message,
          field: error.field,
          code: error.code
        });
      }

      if (error instanceof ServiceError) {
        return res.status(error.statusCode).json({
          error: error.message,
          code: error.code
        });
      }

      // –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        code: 'INTERNAL_SERVER_ERROR'
      });
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async listen(port: number): Promise<void> {
    return new Promise((resolve) => {
      this.app.listen(port, () => {
        console.log(`üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve();
      });
    });
  }
}
