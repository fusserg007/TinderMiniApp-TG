import { MongoStore } from './infra/mongo-store';
import { ObjectStorage } from './infra/object-storage';
import { TgBotApi } from './infra/tg-bot-api';
import { ExpressHttpServer } from './infra/express-http-server';
import { restApiRoutes } from './adapter/rest-api';
import { di } from './app/di';

const PORT = Number(process.env.PORT) || 4000;
const MONGO_URL = process.env.MONGO_URL || 'mongodb://root:example@localhost:27017/dating_app?authSource=admin';
const MINIO_ENDPOINT = process.env.MINIO_ENDPOINT || 'localhost';
const MINIO_PORT = Number(process.env.MINIO_PORT) || 9000;
const MINIO_ACCESS_KEY = process.env.MINIO_ACCESS_KEY || 'minioadmin';
const MINIO_SECRET_KEY = process.env.MINIO_SECRET_KEY || 'minioadmin';
const MINIO_BUCKET = process.env.MINIO_BUCKET || 'photos';
const BOT_TOKEN = process.env.BOT_TOKEN || '';
const WEBHOOK_URL = process.env.WEBHOOK_URL || '';

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB
  const mongoStore = new MongoStore(MONGO_URL);
  await mongoStore.connect();
  console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const objectStorage = new ObjectStorage({
    endPoint: MINIO_ENDPOINT,
    port: MINIO_PORT,
    useSSL: false,
    accessKey: MINIO_ACCESS_KEY,
    secretKey: MINIO_SECRET_KEY,
    bucket: MINIO_BUCKET
  });
  console.log('‚úÖ Object Storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot API
  const tgBotApi = new TgBotApi(BOT_TOKEN);
  console.log('‚úÖ Telegram Bot API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
  if (WEBHOOK_URL) {
    try {
      await tgBotApi.setWebhook(WEBHOOK_URL);
      console.log('‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', WEBHOOK_URL);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫:', error);
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  di.register('mongoStore', mongoStore);
  di.register('objectStorage', objectStorage);
  di.register('tgBotApi', tgBotApi);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
  const httpServer = new ExpressHttpServer(restApiRoutes);
  
  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  await httpServer.listen(PORT);
  console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    await mongoStore.disconnect();
    console.log('‚úÖ MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    process.exit(0);
  });
}

main().catch((error) => {
  console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
  process.exit(1);
});
